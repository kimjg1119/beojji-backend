// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  studentId   String       @unique
  name        String
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  role        String       @default("user")
  classes     Class[]      @relation("UserClass")
  submissions Submission[]
  activities Activity[]
}

model Class {
  id          Int       @id @default(autoincrement())
  courseId    String
  term        String
  name        String
  description String
  link        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]    @relation("UserClass")
  problems    ClassProblem[]
}

model Problem {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  link        String
  readme      String?      @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  classes     ClassProblem[]
}

model ClassProblem {
  id        Int      @id @default(autoincrement())
  class     Class    @relation(fields: [classId], references: [id])
  classId   Int
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId Int
  dueDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  submissions Submission[]

  @@unique([classId, problemId])
}

model Submission {
  id              Int           @id @default(autoincrement())
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  classProblem    ClassProblem  @relation(fields: [classProblemId], references: [id])
  classProblemId  Int
  code            String
  status          String
  score           Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId, classProblemId])
}

model Activity {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  type      String
  content   String
  createdAt DateTime @default(now())
}
